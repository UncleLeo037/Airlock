[gd_scene load_steps=3 format=3 uid="uid://crvs38nsj5avb"]

[ext_resource type="MeshLibrary" uid="uid://dccuuenx8ce6p" path="res://assets/tiles.tres" id="1_5yxne"]

[sub_resource type="GDScript" id="GDScript_rod8h"]
script/source = "@tool
extends Node3D

@onready var grid_map : GridMap = $GridMap

@export var start : bool = false : set = set_start
@export_range(0, 1) var survival_chance : float = 0.25
@export var border_size : int = 20 : set = set_border_size

@export var room_number : int = 4
@export var room_margin : int = 1
@export var room_recursion : int = 15
@export var min_room_size : int = 2
@export var max_room_size : int = 4
@export_multiline var custom_seed : String = \"\" : set = set_seed

var room_tiles : Array[PackedVector3Array] = []
var room_positions : PackedVector3Array = []

func set_start(val: bool) -> void:
	if Engine.is_editor_hint():
		generate()

func generate() -> void:
	room_tiles.clear()
	room_positions.clear()
	if custom_seed : set_seed(custom_seed)
	visualize_border()
	for i in room_number:
		make_room(room_recursion)
	
	#corridoor stuff:
	var rpv2 : PackedVector2Array = []
	var del_graph : AStar2D = AStar2D.new()
	var mst_graph : AStar2D = AStar2D.new()
	
	for p in room_positions:
		rpv2.append(Vector2(p.x,p.z))
		del_graph.add_point(del_graph.get_available_point_id(), Vector2(p.x,p.z))
		mst_graph.add_point(mst_graph.get_available_point_id(), Vector2(p.x,p.z))
	
	var delauney : Array = Array(Geometry2D.triangulate_delaunay(rpv2))
	
	for i in delauney.size()/3:
		var p1 : int = delauney.pop_front()
		var p2 : int = delauney.pop_front()
		var p3 : int = delauney.pop_front()
		del_graph.connect_points(p1, p2)
		del_graph.connect_points(p2, p3)
		del_graph.connect_points(p1, p3)
	
	var visited_points : PackedInt32Array = []
	visited_points.append(randi() % room_positions.size())
	while visited_points.size() != mst_graph.get_point_count():
		var possible_connections : Array[PackedInt32Array] = []
		for vp in visited_points:
			for c in del_graph.get_point_connections(vp):
				if !visited_points.has(c):
					var con : PackedInt32Array = [vp, c]
					possible_connections.append(con)
		var connection : PackedInt32Array = possible_connections.pick_random()
		for pc in possible_connections:
			if rpv2[pc[0]].distance_squared_to(rpv2[pc[1]]) < rpv2[connection[0]].distance_squared_to(rpv2[connection[1]]):
				connection = pc
		
		visited_points.append(connection[1])
		mst_graph.connect_points(connection[0], connection[1])
		del_graph.disconnect_points(connection[0], connection[1])
		
	var hallway_graph : AStar2D = mst_graph
	
	for p in del_graph.get_point_ids():
		for c in del_graph.get_point_connections(p):
			if c>p:
				var kill : float = randf()
				if survival_chance > kill:
					hallway_graph.connect_points(p, c)
					
	create_hallways(hallway_graph)

func create_hallways(hallway_graph : AStar2D):
	var hallways : Array[PackedVector3Array] = []
	for p in hallway_graph.get_point_ids():
		for c in hallway_graph.get_point_connections(p):
			if c>p:
				var room_from : PackedVector3Array = room_tiles[p]
				var room_to : PackedVector3Array = room_tiles[c]
				var tile_from : Vector3 = room_from[0]
				var tile_to : Vector3 = room_to[0]
				for t in room_from:
					if t.distance_squared_to(room_positions[c])<tile_from.distance_squared_to(room_positions[c]):
						tile_from = t
				for t in room_to:
					if t.distance_squared_to(room_positions[p])<tile_to.distance_squared_to(room_positions[p]):
						tile_to = t
				var hallway : PackedVector3Array = [tile_from, tile_to]
				hallways.append(hallway)
				grid_map.set_cell_item(tile_from, 2)
				grid_map.set_cell_item(tile_to, 2)
	
	var astar : AStarGrid2D = AStarGrid2D.new()
	astar.size = Vector2i.ONE * border_size
	astar.update()
	astar.diagonal_mode = AStarGrid2D.DIAGONAL_MODE_NEVER
	astar.default_estimate_heuristic = AStarGrid2D.HEURISTIC_MANHATTAN
	
	for t in grid_map.get_used_cells_by_item(0):
		astar.set_point_solid(Vector2i(t.x, t.z))
	
	for h in hallways:
		var pos_from : Vector2i = Vector2i(h[0].x, h[0].z)
		var pos_to : Vector2i = Vector2i(h[1].x, h[1].z)
		var hall : PackedVector2Array = astar.get_point_path(pos_from, pos_to)
		
		for t in hall:
			var pos : Vector3i = Vector3i(t.x,0,t.y)
			if grid_map.get_cell_item(pos) <0:
				grid_map.set_cell_item(pos,1)

func make_room(rec: int):
	if !rec>0:
		return
	
	var width : int = (randi() % (max_room_size - min_room_size)) + min_room_size
	var height : int = (randi() % (max_room_size - min_room_size)) + min_room_size
	
	var start_pos : Vector3i
	start_pos.x = randi() % (border_size - width + 1)
	start_pos.z = randi() % (border_size - height + 1)
	
	#checks for overlap
	for r in range(-room_margin, height + room_margin):
		for c in range(-room_margin, width + room_margin):
			var pos : Vector3i = start_pos + Vector3i(c, 0, r)
			if grid_map.get_cell_item(pos) == 0:
				make_room(rec - 1)
				return
	
	var room : PackedVector3Array = []
	for r in height:
		for c in width:
			var pos : Vector3i = start_pos + Vector3i(c, 0, r)
			grid_map.set_cell_item(pos, 0)
			room.append(pos)
	room_tiles.append(room)
	
	#save position of centre of room
	var avg_x : float = start_pos.x + (float(width)/2)
	var avg_z : float = start_pos.z + (float(height)/2)
	var pos : Vector3 = Vector3(avg_x, 0, avg_z)
	room_positions.append(pos)

func set_border_size(val : int) -> void:
	border_size = val
	if Engine.is_editor_hint():
		visualize_border()

func visualize_border() -> void:
	grid_map.clear()
	for i in range(-1, border_size+1):
		grid_map.set_cell_item(Vector3i(i, 0, -1), 3)
		grid_map.set_cell_item(Vector3i(i, 0, border_size), 3)
		grid_map.set_cell_item(Vector3i(border_size, 0, i), 3)
		grid_map.set_cell_item(Vector3i(-1, 0, i), 3)

func set_seed(val:String)->void:
	custom_seed = val
	seed(val.hash())
"

[node name="Generator" type="Node3D"]
script = SubResource("GDScript_rod8h")
survival_chance = 0.467
border_size = 48
room_number = 26
min_room_size = 7
max_room_size = 10

[node name="GridMap" type="GridMap" parent="."]
mesh_library = ExtResource("1_5yxne")
cell_size = Vector3(1, 1, 1)
data = {
"cells": PackedInt32Array(65535, 65535, 3, 65535, 48, 3, 48, 65535, 3, 0, 65535, 3, 0, 48, 3, 48, 0, 3, 65535, 0, 3, 1, 65535, 3, 1, 48, 3, 48, 1, 3, 65535, 1, 3, 2, 65535, 3, 2, 48, 3, 48, 2, 3, 65535, 2, 3, 3, 65535, 3, 3, 48, 3, 48, 3, 3, 65535, 3, 3, 4, 65535, 3, 4, 48, 3, 48, 4, 3, 65535, 4, 3, 5, 65535, 3, 5, 48, 3, 48, 5, 3, 65535, 5, 3, 6, 65535, 3, 6, 48, 3, 48, 6, 3, 65535, 6, 3, 7, 65535, 3, 7, 48, 3, 48, 7, 3, 65535, 7, 3, 8, 65535, 3, 8, 48, 3, 48, 8, 3, 65535, 8, 3, 9, 65535, 3, 9, 48, 3, 48, 9, 3, 65535, 9, 3, 10, 65535, 3, 10, 48, 3, 48, 10, 3, 65535, 10, 3, 11, 65535, 3, 11, 48, 3, 48, 11, 3, 65535, 11, 3, 12, 65535, 3, 12, 48, 3, 48, 12, 3, 65535, 12, 3, 13, 65535, 3, 13, 48, 3, 48, 13, 3, 65535, 13, 3, 14, 65535, 3, 14, 48, 3, 48, 14, 3, 65535, 14, 3, 15, 65535, 3, 15, 48, 3, 48, 15, 3, 65535, 15, 3, 16, 65535, 3, 16, 48, 3, 48, 16, 3, 65535, 16, 3, 17, 65535, 3, 17, 48, 3, 48, 17, 3, 65535, 17, 3, 18, 65535, 3, 18, 48, 3, 48, 18, 3, 65535, 18, 3, 19, 65535, 3, 19, 48, 3, 48, 19, 3, 65535, 19, 3, 20, 65535, 3, 20, 48, 3, 48, 20, 3, 65535, 20, 3, 21, 65535, 3, 21, 48, 3, 48, 21, 3, 65535, 21, 3, 22, 65535, 3, 22, 48, 3, 48, 22, 3, 65535, 22, 3, 23, 65535, 3, 23, 48, 3, 48, 23, 3, 65535, 23, 3, 24, 65535, 3, 24, 48, 3, 48, 24, 3, 65535, 24, 3, 25, 65535, 3, 25, 48, 3, 48, 25, 3, 65535, 25, 3, 26, 65535, 3, 26, 48, 3, 48, 26, 3, 65535, 26, 3, 27, 65535, 3, 27, 48, 3, 48, 27, 3, 65535, 27, 3, 28, 65535, 3, 28, 48, 3, 48, 28, 3, 65535, 28, 3, 29, 65535, 3, 29, 48, 3, 48, 29, 3, 65535, 29, 3, 30, 65535, 3, 30, 48, 3, 48, 30, 3, 65535, 30, 3, 31, 65535, 3, 31, 48, 3, 48, 31, 3, 65535, 31, 3, 32, 65535, 3, 32, 48, 3, 48, 32, 3, 65535, 32, 3, 33, 65535, 3, 33, 48, 3, 48, 33, 3, 65535, 33, 3, 34, 65535, 3, 34, 48, 3, 48, 34, 3, 65535, 34, 3, 35, 65535, 3, 35, 48, 3, 48, 35, 3, 65535, 35, 3, 36, 65535, 3, 36, 48, 3, 48, 36, 3, 65535, 36, 3, 37, 65535, 3, 37, 48, 3, 48, 37, 3, 65535, 37, 3, 38, 65535, 3, 38, 48, 3, 48, 38, 3, 65535, 38, 3, 39, 65535, 3, 39, 48, 3, 48, 39, 3, 65535, 39, 3, 40, 65535, 3, 40, 48, 3, 48, 40, 3, 65535, 40, 3, 41, 65535, 3, 41, 48, 3, 48, 41, 3, 65535, 41, 3, 42, 65535, 3, 42, 48, 3, 48, 42, 3, 65535, 42, 3, 43, 65535, 3, 43, 48, 3, 48, 43, 3, 65535, 43, 3, 44, 65535, 3, 44, 48, 3, 48, 44, 3, 65535, 44, 3, 45, 65535, 3, 45, 48, 3, 48, 45, 3, 65535, 45, 3, 46, 65535, 3, 46, 48, 3, 48, 46, 3, 65535, 46, 3, 47, 65535, 3, 47, 48, 3, 48, 47, 3, 65535, 47, 3, 48, 48, 3, 37, 27, 2, 38, 27, 0, 39, 27, 0, 40, 27, 0, 41, 27, 0, 42, 27, 0, 43, 27, 0, 44, 27, 0, 37, 28, 0, 38, 28, 0, 39, 28, 0, 40, 28, 0, 41, 28, 0, 42, 28, 0, 43, 28, 0, 44, 28, 0, 37, 29, 0, 38, 29, 0, 39, 29, 0, 40, 29, 0, 41, 29, 0, 42, 29, 0, 43, 29, 0, 44, 29, 0, 37, 30, 0, 38, 30, 0, 39, 30, 0, 40, 30, 0, 41, 30, 0, 42, 30, 0, 43, 30, 0, 44, 30, 0, 37, 31, 0, 38, 31, 0, 39, 31, 0, 40, 31, 0, 41, 31, 0, 42, 31, 0, 43, 31, 0, 44, 31, 0, 37, 32, 0, 38, 32, 0, 39, 32, 0, 40, 32, 0, 41, 32, 0, 42, 32, 0, 43, 32, 0, 44, 32, 0, 37, 33, 0, 38, 33, 0, 39, 33, 0, 40, 33, 0, 41, 33, 0, 42, 33, 0, 43, 33, 0, 44, 33, 0, 37, 34, 0, 38, 34, 0, 39, 34, 0, 40, 34, 0, 41, 34, 0, 42, 34, 0, 43, 34, 0, 44, 34, 0, 37, 35, 2, 38, 35, 2, 39, 35, 0, 40, 35, 0, 41, 35, 0, 42, 35, 0, 43, 35, 0, 44, 35, 0, 15, 21, 0, 16, 21, 0, 17, 21, 0, 18, 21, 0, 19, 21, 2, 20, 21, 0, 21, 21, 0, 22, 21, 0, 23, 21, 0, 15, 22, 0, 16, 22, 0, 17, 22, 0, 18, 22, 0, 19, 22, 0, 20, 22, 0, 21, 22, 0, 22, 22, 0, 23, 22, 0, 15, 23, 0, 16, 23, 0, 17, 23, 0, 18, 23, 0, 19, 23, 0, 20, 23, 0, 21, 23, 0, 22, 23, 0, 23, 23, 0, 15, 24, 0, 16, 24, 0, 17, 24, 0, 18, 24, 0, 19, 24, 0, 20, 24, 0, 21, 24, 0, 22, 24, 0, 23, 24, 0, 15, 25, 0, 16, 25, 0, 17, 25, 0, 18, 25, 0, 19, 25, 0, 20, 25, 0, 21, 25, 0, 22, 25, 0, 23, 25, 0, 15, 26, 0, 16, 26, 0, 17, 26, 0, 18, 26, 0, 19, 26, 0, 20, 26, 0, 21, 26, 0, 22, 26, 0, 23, 26, 0, 15, 27, 0, 16, 27, 0, 17, 27, 0, 18, 27, 0, 19, 27, 0, 20, 27, 0, 21, 27, 0, 22, 27, 0, 23, 27, 0, 15, 28, 0, 16, 28, 0, 17, 28, 0, 18, 28, 0, 19, 28, 0, 20, 28, 0, 21, 28, 0, 22, 28, 0, 23, 28, 0, 15, 29, 0, 16, 29, 0, 17, 29, 0, 18, 29, 0, 19, 29, 2, 20, 29, 0, 21, 29, 0, 22, 29, 0, 23, 29, 0, 24, 36, 0, 25, 36, 0, 26, 36, 0, 27, 36, 0, 28, 36, 0, 29, 36, 0, 30, 36, 2, 24, 37, 0, 25, 37, 0, 26, 37, 0, 27, 37, 0, 28, 37, 0, 29, 37, 0, 30, 37, 0, 24, 38, 0, 25, 38, 0, 26, 38, 0, 27, 38, 0, 28, 38, 0, 29, 38, 0, 30, 38, 0, 24, 39, 0, 25, 39, 0, 26, 39, 0, 27, 39, 0, 28, 39, 0, 29, 39, 0, 30, 39, 0, 24, 40, 2, 25, 40, 0, 26, 40, 0, 27, 40, 0, 28, 40, 0, 29, 40, 0, 30, 40, 0, 24, 41, 0, 25, 41, 0, 26, 41, 0, 27, 41, 0, 28, 41, 0, 29, 41, 0, 30, 41, 2, 24, 42, 0, 25, 42, 0, 26, 42, 0, 27, 42, 0, 28, 42, 0, 29, 42, 0, 30, 42, 0, 24, 43, 0, 25, 43, 0, 26, 43, 0, 27, 43, 0, 28, 43, 0, 29, 43, 0, 30, 43, 0, 15, 36, 2, 16, 36, 0, 17, 36, 0, 18, 36, 0, 19, 36, 2, 20, 36, 0, 21, 36, 0, 22, 36, 0, 15, 37, 0, 16, 37, 0, 17, 37, 0, 18, 37, 0, 19, 37, 0, 20, 37, 0, 21, 37, 0, 22, 37, 0, 15, 38, 0, 16, 38, 0, 17, 38, 0, 18, 38, 0, 19, 38, 0, 20, 38, 0, 21, 38, 0, 22, 38, 0, 15, 39, 0, 16, 39, 0, 17, 39, 0, 18, 39, 0, 19, 39, 0, 20, 39, 0, 21, 39, 0, 22, 39, 0, 15, 40, 0, 16, 40, 0, 17, 40, 0, 18, 40, 0, 19, 40, 0, 20, 40, 0, 21, 40, 0, 22, 40, 2, 15, 41, 2, 16, 41, 0, 17, 41, 0, 18, 41, 0, 19, 41, 0, 20, 41, 0, 21, 41, 0, 22, 41, 0, 15, 42, 0, 16, 42, 0, 17, 42, 0, 18, 42, 0, 19, 42, 0, 20, 42, 0, 21, 42, 0, 22, 42, 0, 15, 43, 0, 16, 43, 0, 17, 43, 0, 18, 43, 0, 19, 43, 0, 20, 43, 0, 21, 43, 0, 22, 43, 0, 38, 9, 2, 39, 9, 0, 40, 9, 0, 41, 9, 0, 42, 9, 0, 43, 9, 0, 44, 9, 0, 38, 10, 0, 39, 10, 0, 40, 10, 0, 41, 10, 0, 42, 10, 0, 43, 10, 0, 44, 10, 0, 38, 11, 0, 39, 11, 0, 40, 11, 0, 41, 11, 0, 42, 11, 0, 43, 11, 0, 44, 11, 0, 38, 12, 0, 39, 12, 0, 40, 12, 0, 41, 12, 0, 42, 12, 0, 43, 12, 0, 44, 12, 0, 38, 13, 0, 39, 13, 0, 40, 13, 0, 41, 13, 0, 42, 13, 0, 43, 13, 0, 44, 13, 0, 38, 14, 0, 39, 14, 0, 40, 14, 0, 41, 14, 0, 42, 14, 0, 43, 14, 0, 44, 14, 0, 38, 15, 0, 39, 15, 0, 40, 15, 0, 41, 15, 0, 42, 15, 0, 43, 15, 0, 44, 15, 0, 38, 16, 0, 39, 16, 0, 40, 16, 0, 41, 16, 0, 42, 16, 0, 43, 16, 0, 44, 16, 0, 38, 17, 2, 39, 17, 0, 40, 17, 0, 41, 17, 0, 42, 17, 0, 43, 17, 0, 44, 17, 0, 29, 5, 0, 30, 5, 0, 31, 5, 0, 32, 5, 0, 33, 5, 0, 34, 5, 0, 35, 5, 0, 36, 5, 0, 29, 6, 0, 30, 6, 0, 31, 6, 0, 32, 6, 0, 33, 6, 0, 34, 6, 0, 35, 6, 0, 36, 6, 0, 29, 7, 0, 30, 7, 0, 31, 7, 0, 32, 7, 0, 33, 7, 0, 34, 7, 0, 35, 7, 0, 36, 7, 0, 29, 8, 0, 30, 8, 0, 31, 8, 0, 32, 8, 0, 33, 8, 0, 34, 8, 0, 35, 8, 0, 36, 8, 0, 29, 9, 0, 30, 9, 0, 31, 9, 0, 32, 9, 0, 33, 9, 0, 34, 9, 0, 35, 9, 0, 36, 9, 0, 29, 10, 0, 30, 10, 0, 31, 10, 0, 32, 10, 0, 33, 10, 0, 34, 10, 0, 35, 10, 0, 36, 10, 0, 29, 11, 0, 30, 11, 0, 31, 11, 0, 32, 11, 0, 33, 11, 0, 34, 11, 0, 35, 11, 0, 36, 11, 2, 4, 8, 2, 5, 8, 0, 6, 8, 0, 7, 8, 0, 8, 8, 0, 9, 8, 0, 10, 8, 2, 4, 9, 0, 5, 9, 0, 6, 9, 0, 7, 9, 0, 8, 9, 0, 9, 9, 0, 10, 9, 0, 4, 10, 0, 5, 10, 0, 6, 10, 0, 7, 10, 0, 8, 10, 0, 9, 10, 0, 10, 10, 0, 4, 11, 0, 5, 11, 0, 6, 11, 0, 7, 11, 0, 8, 11, 0, 9, 11, 0, 10, 11, 0, 4, 12, 0, 5, 12, 0, 6, 12, 0, 7, 12, 0, 8, 12, 0, 9, 12, 0, 10, 12, 0, 4, 13, 0, 5, 13, 0, 6, 13, 0, 7, 13, 0, 8, 13, 0, 9, 13, 0, 10, 13, 0, 4, 14, 0, 5, 14, 0, 6, 14, 0, 7, 14, 0, 8, 14, 0, 9, 14, 0, 10, 14, 0, 4, 15, 0, 5, 15, 2, 6, 15, 0, 7, 15, 0, 8, 15, 0, 9, 15, 0, 10, 15, 0, 1, 17, 0, 2, 17, 0, 3, 17, 0, 4, 17, 0, 5, 17, 0, 6, 17, 0, 7, 17, 2, 8, 17, 0, 9, 17, 2, 1, 18, 0, 2, 18, 0, 3, 18, 0, 4, 18, 0, 5, 18, 0, 6, 18, 0, 7, 18, 0, 8, 18, 0, 9, 18, 0, 1, 19, 0, 2, 19, 0, 3, 19, 0, 4, 19, 0, 5, 19, 0, 6, 19, 0, 7, 19, 0, 8, 19, 0, 9, 19, 0, 1, 20, 0, 2, 20, 0, 3, 20, 0, 4, 20, 0, 5, 20, 0, 6, 20, 0, 7, 20, 0, 8, 20, 0, 9, 20, 0, 1, 21, 0, 2, 21, 0, 3, 21, 0, 4, 21, 0, 5, 21, 0, 6, 21, 0, 7, 21, 0, 8, 21, 0, 9, 21, 0, 1, 22, 0, 2, 22, 0, 3, 22, 0, 4, 22, 0, 5, 22, 0, 6, 22, 0, 7, 22, 0, 8, 22, 0, 9, 22, 0, 1, 23, 0, 2, 23, 0, 3, 23, 0, 4, 23, 0, 5, 23, 0, 6, 23, 0, 7, 23, 0, 8, 23, 0, 9, 23, 0, 1, 24, 0, 2, 24, 0, 3, 24, 2, 4, 24, 0, 5, 24, 0, 6, 24, 0, 7, 24, 0, 8, 24, 0, 9, 24, 0, 34, 38, 0, 35, 38, 0, 36, 38, 0, 37, 38, 0, 38, 38, 0, 39, 38, 0, 40, 38, 0, 41, 38, 2, 34, 39, 0, 35, 39, 0, 36, 39, 0, 37, 39, 0, 38, 39, 0, 39, 39, 0, 40, 39, 0, 41, 39, 0, 34, 40, 2, 35, 40, 0, 36, 40, 0, 37, 40, 0, 38, 40, 0, 39, 40, 0, 40, 40, 0, 41, 40, 0, 34, 41, 2, 35, 41, 0, 36, 41, 0, 37, 41, 0, 38, 41, 0, 39, 41, 0, 40, 41, 0, 41, 41, 0, 34, 42, 0, 35, 42, 0, 36, 42, 0, 37, 42, 0, 38, 42, 0, 39, 42, 0, 40, 42, 0, 41, 42, 0, 34, 43, 0, 35, 43, 0, 36, 43, 0, 37, 43, 0, 38, 43, 0, 39, 43, 0, 40, 43, 0, 41, 43, 0, 34, 44, 0, 35, 44, 0, 36, 44, 0, 37, 44, 0, 38, 44, 0, 39, 44, 0, 40, 44, 0, 41, 44, 0, 15, 11, 0, 16, 11, 0, 17, 11, 2, 18, 11, 0, 19, 11, 0, 20, 11, 0, 21, 11, 0, 22, 11, 0, 23, 11, 0, 15, 12, 0, 16, 12, 0, 17, 12, 0, 18, 12, 0, 19, 12, 0, 20, 12, 0, 21, 12, 0, 22, 12, 0, 23, 12, 0, 15, 13, 0, 16, 13, 0, 17, 13, 0, 18, 13, 0, 19, 13, 0, 20, 13, 0, 21, 13, 0, 22, 13, 0, 23, 13, 0, 15, 14, 0, 16, 14, 0, 17, 14, 0, 18, 14, 0, 19, 14, 0, 20, 14, 0, 21, 14, 0, 22, 14, 0, 23, 14, 0, 15, 15, 0, 16, 15, 0, 17, 15, 0, 18, 15, 0, 19, 15, 0, 20, 15, 0, 21, 15, 0, 22, 15, 0, 23, 15, 0, 15, 16, 0, 16, 16, 0, 17, 16, 0, 18, 16, 0, 19, 16, 0, 20, 16, 0, 21, 16, 0, 22, 16, 0, 23, 16, 0, 15, 17, 2, 16, 17, 0, 17, 17, 0, 18, 17, 0, 19, 17, 2, 20, 17, 0, 21, 17, 0, 22, 17, 0, 23, 17, 2, 0, 27, 0, 1, 27, 0, 2, 27, 0, 3, 27, 0, 4, 27, 0, 5, 27, 2, 6, 27, 0, 0, 28, 0, 1, 28, 0, 2, 28, 0, 3, 28, 0, 4, 28, 0, 5, 28, 0, 6, 28, 0, 0, 29, 0, 1, 29, 0, 2, 29, 0, 3, 29, 0, 4, 29, 0, 5, 29, 0, 6, 29, 0, 0, 30, 0, 1, 30, 0, 2, 30, 0, 3, 30, 0, 4, 30, 0, 5, 30, 0, 6, 30, 0, 0, 31, 0, 1, 31, 0, 2, 31, 0, 3, 31, 0, 4, 31, 0, 5, 31, 0, 6, 31, 0, 0, 32, 0, 1, 32, 0, 2, 32, 0, 3, 32, 0, 4, 32, 0, 5, 32, 0, 6, 32, 0, 0, 33, 0, 1, 33, 0, 2, 33, 0, 3, 33, 0, 4, 33, 0, 5, 33, 0, 6, 33, 0, 0, 34, 0, 1, 34, 0, 2, 34, 0, 3, 34, 0, 4, 34, 0, 5, 34, 0, 6, 34, 0, 0, 35, 0, 1, 35, 0, 2, 35, 0, 3, 35, 0, 4, 35, 0, 5, 35, 0, 6, 35, 2, 13, 3, 0, 14, 3, 0, 15, 3, 0, 16, 3, 0, 17, 3, 0, 18, 3, 0, 19, 3, 0, 20, 3, 0, 21, 3, 0, 13, 4, 0, 14, 4, 0, 15, 4, 0, 16, 4, 0, 17, 4, 0, 18, 4, 0, 19, 4, 0, 20, 4, 0, 21, 4, 0, 13, 5, 0, 14, 5, 0, 15, 5, 0, 16, 5, 0, 17, 5, 0, 18, 5, 0, 19, 5, 0, 20, 5, 0, 21, 5, 0, 13, 6, 0, 14, 6, 0, 15, 6, 0, 16, 6, 0, 17, 6, 0, 18, 6, 0, 19, 6, 0, 20, 6, 0, 21, 6, 0, 13, 7, 0, 14, 7, 0, 15, 7, 0, 16, 7, 0, 17, 7, 0, 18, 7, 0, 19, 7, 0, 20, 7, 0, 21, 7, 0, 13, 8, 0, 14, 8, 0, 15, 8, 0, 16, 8, 0, 17, 8, 0, 18, 8, 0, 19, 8, 0, 20, 8, 0, 21, 8, 0, 13, 9, 2, 14, 9, 0, 15, 9, 0, 16, 9, 0, 17, 9, 0, 18, 9, 0, 19, 9, 2, 20, 9, 0, 21, 9, 0, 29, 18, 2, 30, 18, 0, 31, 18, 0, 32, 18, 0, 33, 18, 0, 34, 18, 0, 35, 18, 0, 36, 18, 2, 29, 19, 0, 30, 19, 0, 31, 19, 0, 32, 19, 0, 33, 19, 0, 34, 19, 0, 35, 19, 0, 36, 19, 0, 29, 20, 0, 30, 20, 0, 31, 20, 0, 32, 20, 0, 33, 20, 0, 34, 20, 0, 35, 20, 0, 36, 20, 0, 29, 21, 0, 30, 21, 0, 31, 21, 0, 32, 21, 0, 33, 21, 0, 34, 21, 0, 35, 21, 0, 36, 21, 0, 29, 22, 0, 30, 22, 0, 31, 22, 0, 32, 22, 0, 33, 22, 0, 34, 22, 0, 35, 22, 0, 36, 22, 0, 29, 23, 0, 30, 23, 0, 31, 23, 0, 32, 23, 0, 33, 23, 0, 34, 23, 0, 35, 23, 0, 36, 23, 0, 29, 24, 0, 30, 24, 0, 31, 24, 0, 32, 24, 0, 33, 24, 0, 34, 24, 0, 35, 24, 0, 36, 24, 0, 29, 25, 0, 30, 25, 0, 31, 25, 0, 32, 25, 0, 33, 25, 0, 34, 25, 0, 35, 25, 0, 36, 25, 2, 3, 37, 2, 4, 37, 0, 5, 37, 0, 6, 37, 0, 7, 37, 0, 8, 37, 0, 9, 37, 0, 10, 37, 0, 11, 37, 0, 3, 38, 0, 4, 38, 0, 5, 38, 0, 6, 38, 0, 7, 38, 0, 8, 38, 0, 9, 38, 0, 10, 38, 0, 11, 38, 0, 3, 39, 0, 4, 39, 0, 5, 39, 0, 6, 39, 0, 7, 39, 0, 8, 39, 0, 9, 39, 0, 10, 39, 0, 11, 39, 0, 3, 40, 0, 4, 40, 0, 5, 40, 0, 6, 40, 0, 7, 40, 0, 8, 40, 0, 9, 40, 0, 10, 40, 0, 11, 40, 2, 3, 41, 0, 4, 41, 0, 5, 41, 0, 6, 41, 0, 7, 41, 0, 8, 41, 0, 9, 41, 0, 10, 41, 0, 11, 41, 2, 3, 42, 0, 4, 42, 0, 5, 42, 0, 6, 42, 0, 7, 42, 0, 8, 42, 0, 9, 42, 0, 10, 42, 0, 11, 42, 0, 3, 43, 0, 4, 43, 0, 5, 43, 0, 6, 43, 0, 7, 43, 0, 8, 43, 0, 9, 43, 0, 10, 43, 0, 11, 43, 0, 3, 44, 0, 4, 44, 0, 5, 44, 0, 6, 44, 0, 7, 44, 0, 8, 44, 0, 9, 44, 0, 10, 44, 0, 11, 44, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 0, 7, 0, 0, 1, 1, 0, 2, 1, 0, 3, 1, 0, 4, 1, 0, 5, 1, 0, 6, 1, 0, 7, 1, 0, 1, 2, 0, 2, 2, 0, 3, 2, 0, 4, 2, 0, 5, 2, 0, 6, 2, 0, 7, 2, 0, 1, 3, 0, 2, 3, 0, 3, 3, 0, 4, 3, 0, 5, 3, 0, 6, 3, 0, 7, 3, 0, 1, 4, 0, 2, 4, 0, 3, 4, 0, 4, 4, 0, 5, 4, 0, 6, 4, 0, 7, 4, 0, 1, 5, 0, 2, 5, 0, 3, 5, 0, 4, 5, 0, 5, 5, 0, 6, 5, 0, 7, 5, 0, 1, 6, 0, 2, 6, 0, 3, 6, 0, 4, 6, 0, 5, 6, 0, 6, 6, 0, 7, 6, 2, 23, 40, 1, 31, 41, 1, 31, 40, 1, 32, 40, 1, 33, 40, 1, 33, 41, 1, 32, 41, 1, 31, 42, 1, 31, 43, 1, 31, 44, 1, 30, 44, 1, 29, 44, 1, 28, 44, 1, 27, 44, 1, 26, 44, 1, 25, 44, 1, 24, 44, 1, 23, 44, 1, 22, 44, 1, 21, 44, 1, 20, 44, 1, 19, 44, 1, 18, 44, 1, 17, 44, 1, 16, 44, 1, 15, 44, 1, 14, 44, 1, 14, 43, 1, 14, 42, 1, 14, 41, 1, 13, 41, 1, 12, 41, 1, 37, 36, 1, 36, 36, 1, 35, 36, 1, 34, 36, 1, 33, 36, 1, 32, 36, 1, 31, 36, 1, 38, 36, 1, 39, 36, 1, 40, 36, 1, 41, 36, 1, 41, 37, 1, 37, 26, 1, 37, 25, 1, 14, 40, 1, 13, 40, 1, 12, 40, 1, 15, 35, 1, 14, 35, 1, 13, 35, 1, 12, 35, 1, 11, 35, 1, 10, 35, 1, 9, 35, 1, 8, 35, 1, 7, 35, 1, 5, 16, 1, 6, 16, 1, 7, 16, 1, 11, 8, 1, 12, 8, 1, 12, 9, 1, 4, 7, 1, 5, 7, 1, 6, 7, 1, 7, 7, 1, 17, 10, 1, 18, 10, 1, 19, 10, 1, 24, 17, 1, 25, 17, 1, 26, 17, 1, 27, 17, 1, 28, 17, 1, 29, 17, 1, 6, 36, 1, 5, 36, 1, 4, 36, 1, 3, 36, 1, 3, 25, 1, 4, 25, 1, 5, 25, 1, 5, 26, 1, 10, 17, 1, 11, 17, 1, 12, 17, 1, 13, 17, 1, 14, 17, 1, 19, 30, 1, 19, 31, 1, 19, 32, 1, 19, 33, 1, 19, 34, 1, 19, 35, 1, 19, 20, 1, 19, 19, 1, 19, 18, 1, 37, 9, 1, 37, 10, 1, 37, 11, 1, 38, 18, 1, 37, 18, 1)
}
metadata/_editor_floor_ = Vector3(0, 0, 0)
